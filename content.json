{"pages":[{"title":"","text":"Untitled // Pandoc 2.9 adds attributes on both header and div. We remove the former (to // be compatible with the behavior of Pandoc < 2.8). document.addEventListener('DOMContentLoaded', function(e) { var hs = document.querySelectorAll(\"div.section[class*='level'] > :first-child\"); var i, h, a; for (i = 0; i < hs.length; i++) { h = hs[i]; if (!/^h[1-6]$/i.test(h.tagName)) continue; // it should be a header h1-h6 a = h.attributes; while (a.length > 0) h.removeAttribute(a[0].name); } }); /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */ !function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(C,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.0\",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&\"length\"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0","link":"/images/blog.html"},{"title":"","text":"blog_2 // Pandoc 2.9 adds attributes on both header and div. We remove the former (to // be compatible with the behavior of Pandoc < 2.8). document.addEventListener('DOMContentLoaded', function(e) { var hs = document.querySelectorAll(\"div.section[class*='level'] > :first-child\"); var i, h, a; for (i = 0; i < hs.length; i++) { h = hs[i]; if (!/^h[1-6]$/i.test(h.tagName)) continue; // it should be a header h1-h6 a = h.attributes; while (a.length > 0) h.removeAttribute(a[0].name); } }); /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */ !function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(C,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.0\",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&\"length\"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0","link":"/images/blog_2.html"},{"title":"","text":"r_blog // Pandoc 2.9 adds attributes on both header and div. We remove the former (to // be compatible with the behavior of Pandoc < 2.8). document.addEventListener('DOMContentLoaded', function(e) { var hs = document.querySelectorAll(\"div.section[class*='level'] > :first-child\"); var i, h, a; for (i = 0; i < hs.length; i++) { h = hs[i]; if (!/^h[1-6]$/i.test(h.tagName)) continue; // it should be a header h1-h6 a = h.attributes; while (a.length > 0) h.removeAttribute(a[0].name); } }); /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */ !function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(C,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.0\",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&\"length\"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0","link":"/images/r_blog.html"}],"posts":[{"title":"환영합니다!","text":"귀영의 블로그에 오신 것을 환영합니다!블로그 셋팅중입니다.Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 추가 페이지안녕하세요!","link":"/2022/03/17/hello-world/"},{"title":"통계 분석","text":"[1] 분석 방법 기술통계 평균, 최솟값, 최댓값, 중앙값과 같이 데이터의 특징을 알려주는 값들 데이터의 특징을 서술, 사실 확인 추론통계 변수 간의 관계를 파악하고, 이를 토대로 변수 간의 인관관계나 새로운 사실들을 밝혀내는 것 평균 차이 검정, 교차분석, 상관관계분석, 회귀분석 (1) 평균 차이 검정 : 집단 별로 평균의 차이가 실제로 있는지를 검정하는 것(2) 교차분석 : 범주형 변수로 구성된 집단들의 관련성을 검정하는 통계 분석 (교차분석의 목적은 두 변수 사이에 관계가 있음을 알아보는 것)(3) 상관관계분석(변수 간의 연관성) 변수 간의 상관관계를 알아보는 것 한 변수가 변화하면 다른 변수도 변화하는 관계 집합에서 여러 집단들이 교차해 있는 공집합의 관계를 생각하기 관계의 강도와 방향이 중요함. -&gt; 강도 : 한 변수가 변화할 때 다른 변수가 변화하는 정도 방향 : 한 변수가 변화할 때 다른 변수가 같은 방향으로 변화하는지, 반대 방향으로 변화하는지를 의미 - 변화의 강도와 방향을 나타나는 계수가 상관계수(r) - 상관계수는 -1 부터 1사이에 있음. - 수치가 클수록 영향을 주는 강도가 큼 - +는 정의 관계, -는 부의 관계, 역의 관계를 의미 - 상관계수가 0.3이면 한 변수가 1단위 변화할때 다른 변수가 0.3만큼 같은 방향으로 변화함을 말함 (4) 회귀분석 : 변수들의 관계를 알 수는 있지만, 인과관계는 알수없음 -&gt; 한 변수가 다른 변수에 영향을 주는 것을 말함 - 영향을 주는 변수 : 독립변수(independent variable) - 영향을 받는 변수 : 종속변수(dependent variable) - 독립변수와 종속변수 간의 인과관계를 분석하는 통계적 방법을 회귀분석(regression analysis)이라고 함 - 독립변수가 1개이면 “단순회귀분석”, 2개 이상이면 “다중회귀분석” 통계 검정","link":"/2022/03/15/0315_report/"},{"title":"hexo_blog_install","text":"Hexo Blog 만들기참고 : https://dschloe.github.io/settings/hexo_blog/ 먼저 nodejs.org 설치해준다 링크 : https://nodejs.org/en/ → 16.14.1 LTS 로 설치 설치 완료 후 마우스 우클릭하여서 Git Bash Here 선택 명령어 창이 뜨는데 거기서 아래 명령어를 입력하여 버전을 확인해준다 12node -vgit --version 확인이 되면 깃허브 홈페이지로 가서 New를 클릭하여 새로운 저장소를 만들어준다. (이름은 원하는대로 설정) 설정 후 다시 2번의 상황을 반복한 후 아래의 명령어를 입력해준다. 1hexo init &quot;폴더명&quot; 명령어를 입력해주면 바탕화면에 해당 폴더명으로 된 폴더가 생긴것을 확인. 그 폴더에 마우스 우클릭하여 파이참으로 실행하기 파이참에서 아래의 명령어를 입력하여 실행해준다 1234567echo &quot;# myblog&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git branch -M maingit remote add origin https://github.com/sungwiyoung/myblog.gitgit push -u origin main ※ 주의할점은 본인이 만든 폴더명을 넣어주어야함 git add “내가 올리고자 하는 파일명” // git add . → 해당 폴더에 있는 모든 파일 git commit -m “내가 넣고자 하는 메세지명” git push 명령어를 입력해주면 업로드가 됨. hexo server 를 입력하여 홈페이지가 잘 들어가는지 확인 홈페이지 연동하기 파이참을 실행하여 config.yml 더블클릭하여 진입 title, url, deploy를 변경해주어야함. title : 원하는 타이틀로 입력해준다 url : [https://sungwiyoung.github.io](https://sungwiyoung.github.io) 자신의 사용자명이 들어가도록 바꿔준다 1234deploy: type: git repo: https://github.com/sungwiyoung/sungwiyoung.github.io.git branch: main deploy에서도 repo 부분을 자신의 사용자명이 들어가도록 수정해준다. 배포를 하기위한 준비 아래의 명령어를 파이참에 입력해주어 패키지를 설치한다. 123$ npm install$ npm install hexo-server --save$ npm install hexo-deployer-git --save 4번과 동일하게 새로운 저장소를 만들어주는데 9번에서 입력한 url에서 사용자명에서 io까지로 입력하여 만들어준다. 아래의 명령어를 입력해주어 배포를 해준다. 1234hexo generatehexo deploy또는hexo generate deploy 배포를 해준 후 다시 서버를 열어서 잘 들어가는지 확인해준다. 1hexo server hexo 홈페이지에서 나오는 첫번째 명령어를 입력해준다 hexo server 명령어 입력후 나오는 홈페이지에 있음 1$ hexo new &quot;My New Post&quot; 입력해주면 파이참에 My-Nes-Post.md라는 파일이 생기는 것을 확인해준다. 테마설치(명령어만 입력해주면 자동으로 바뀜) 참고 페이지 : https://hexo.io/themes/ 위 홈페이지 열린 후 파이참에서 아래의 명령어를 입력해준다 12npm install -S hexo-theme-icarushexo config theme icarus 위 명령어를 입력후 hexo server 명령어를 입력하여 테마가 잘 바뀌었는지 확인한다. 오류가 날시에는 아래의 명령어를 입력해주어 다시 확인해준다. 1npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 다시 서버를 열어보고 잘 되었는지 확인해준다. 테마가 잘 바뀌었으면 정상적으로 된것임. ※ hexo clean 명령어로 청소해주기 ★ myblog 저장소는 자료가 날라갈것을 대비한 백업용 ★ ****sungwiyoung.github.io 저장소는 자동저장용**","link":"/2022/03/18/Hexo_Blog_install/"},{"title":"colab_intro","text":"Colab이란? Colaboratory&amp;#40;줄여서 ‘Colab’이라고 함&amp;#41;을 통해 브라우저 내에서 Python 스크립트를 작성하고 실행할 수 있습니다. 구성이 필요하지 않음 GPU 무료 액세스 간편한 공유 학생이든, 데이터 과학자든, AI 연구원이든 Colab으로 업무를 더욱 간편하게 처리할 수 있습니다. Colab 소개 영상에서 자세한 내용을 확인하거나 아래에서 시작해 보세요. 시작하기지금 읽고 계신 문서는 정적 웹페이지가 아니라 코드를 작성하고 실행할 수 있는 대화형 환경인 Colab 메모장입니다. 예를 들어 다음은 값을 계산하여 변수로 저장하고 결과를 출력하는 간단한 Python 스크립트가 포함된 코드 셀입니다. 12seconds_in_a_day = 24 * 60 * 60seconds_in_a_day 86400 위 셀의 코드를 실행하려면 셀을 클릭하여 선택한 후 코드 왼쪽의 실행 버튼을 누르거나 단축키 ‘Command/Ctrl+Enter’를 사용하세요. 셀을 클릭하면 코드 수정을 바로 시작할 수 있습니다. 특정 셀에서 정의한 변수를 나중에 다른 셀에서 사용할 수 있습니다. 12seconds_in_a_week = 7 * seconds_in_a_dayseconds_in_a_week 604800 Colab 메모장을 사용하면 실행 코드와 서식 있는 텍스트를 이미지, HTML, LaTeX 등과 함께 하나의 문서로 통합할 수 있습니다. Colab 메모장을 만들면 Google Drive 계정에 저장됩니다. Colab 메모장을 간편하게 공유하여 동료나 친구들이 댓글을 달거나 수정하도록 할 수 있습니다. 자세히 알아보려면 Colab 개요를 참조하세요. 새 Colab 메모장을 만들려면 위의 파일 메뉴를 사용하거나 다음 링크로 이동하세요. 새 Colab 메모장 만들기 Colab 메모장은 Colab에서 호스팅하는 Jupyter 메모장입니다. Jupyter 프로젝트에 관해 자세히 알아보려면 jupyter.org를 참조하세요. 데이터 과학Colab을 통해 인기 있는 Python 라이브러리를 최대한 활용하여 데이터를 분석하고 시각화할 수 있습니다. 아래 코드 셀에서는 Numpy를 사용하여 임의의 데이터를 생성하고 매트플롯립으로 이를 시각화합니다. 셀을 클릭하면 코드 수정을 바로 시작할 수 있습니다. 1234567891011import numpy as npfrom matplotlib import pyplot as pltys = 200 + np.random.randn(100)x = [x for x in range(len(ys))]plt.plot(x, ys, '-')plt.fill_between(x, ys, 195, where=(ys &gt; 195), facecolor='g', alpha=0.6)plt.title(&quot;Sample Visualization&quot;)plt.show() Google Drive 계정에서 스프레드시트를 비롯한 데이터를 Colab 메모장으로 가져오거나 GitHub 등의 여러 다른 소스에서 데이터를 가져올 수 있습니다. Colab을 데이터 과학에 활용하는 방법과 데이터 가져오기에 관해 자세히 알아보려면 데이터 사용하기 아래 링크를 참조하세요. 머신러닝Colab을 사용하면 코드 몇 줄만으로 이미지 데이터세트를 가져오고, 이 데이터세트로 이미지 분류기를 학습시키며, 모델을 평가할 수 있습니다. Colab 메모장은 Google 클라우드 서버에서 코드를 실행하므로 사용 중인 컴퓨터의 성능과 관계없이 GPU 및 TPU를 포함한 Google 하드웨어의 성능을 활용할 수 있습니다. 브라우저만 있으면 사용 가능합니다. Colab은 다음과 같은 분야의 머신러닝 커뮤니티에서 널리 쓰이고 있습니다. TensorFlow 시작하기 신경망 개발 및 학습시키기 TPU로 실험하기 AI 연구 보급하기 튜토리얼 만들기 머신러닝 적용 사례를 보여 주는 Colab 메모장 샘플을 확인하려면 아래 머신러닝 예시를 참조하세요. 추가 리소스Colab에서 메모장 사용하기 Colaboratory 개요 Markdown 가이드 라이브러리 가져오기 및 종속 항목 설치하기 GitHub에서 노트 저장 및 로드하기 대화형 양식 대화형 위젯 Colab의 TensorFlow 2 데이터로 작업하기 데이터 로드: 드라이브, 스프레드시트, Google Cloud Storage 차트: 데이터 시각화하기 BigQuery 시작하기 머신러닝 단기집중과정다음은 Google 온라인 머신러닝 과정에서 가져온 일부 메모장입니다. 전체 과정 웹사이트에서 자세한 내용을 확인하세요. Pandas DataFrame 소개 합성 데이터를 사용하는 tf.keras 선형 회귀 가속 하드웨어 사용하기 GPU를 사용한 TensorFlow TPU를 사용한 TensorFlow 추천 예시 NeMo Voice Swap: Nvidia의 NeMo 대화형 AI 툴킷을 사용하여 오디오 파일의 음성을 컴퓨터에서 생성된 음성으로 변환하세요. 이미지 분류기 재훈련: 사전에 훈련된 이미지 분류기를 기반으로 꽃을 분류하기 위한 Keras 모델을 구축합니다. 텍스트 분류: IMDB 영화 리뷰를 긍정적인 리뷰 또는 부정적인 리뷰로 분류합니다. 스타일 트랜스퍼: 딥 러닝을 사용하여 이미지 간에 스타일을 전이시킵니다. Multilingual Universal Sentence Encoder Q&amp;A: 머신러닝 모델을 사용하여 SQuAD 데이터 세트의 질문에 답변합니다. 동영상 보간 유형: 동영상에서 첫 프레임과 마지막 프레임 사이에 발생한 내용을 예측합니다.","link":"/2022/03/18/colab_intro/"}],"tags":[],"categories":[]}